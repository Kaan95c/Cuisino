// Script de test pour v√©rifier le flux complet des recettes
// √Ä ex√©cuter dans la console du navigateur ou dans l'app

console.log('üß™ Test du flux complet des recettes');

// Test 1: V√©rifier que l'API est accessible
async function testApiConnection() {
  try {
    const response = await fetch('http://192.168.1.146:8000/api/');
    if (response.ok) {
      console.log('‚úÖ API accessible');
      return true;
    } else {
      console.log('‚ùå API non accessible');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur de connexion API:', error);
    return false;
  }
}

// Test 2: Cr√©er une recette de test
async function testCreateRecipe() {
  try {
    const testRecipe = {
      title: "Recette de test",
      description: "Description de test",
      ingredients: ["Ingr√©dient 1", "Ingr√©dient 2"],
      instructions: ["√âtape 1", "√âtape 2"],
      image: "https://example.com/image.jpg",
      author: {
        id: "test-user-id",
        name: "Test User",
        avatar: "https://example.com/avatar.jpg"
      },
      servings: 4,
      prepTimeMinutes: 30,
      difficulty: "easy",
      tags: ["test"]
    };

    const response = await fetch('http://192.168.1.146:8000/api/recipes', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TOKEN_HERE' // Remplacez par un vrai token
      },
      body: JSON.stringify(testRecipe)
    });

    if (response.ok) {
      const recipe = await response.json();
      console.log('‚úÖ Recette cr√©√©e:', recipe.id);
      return recipe.id;
    } else {
      console.log('‚ùå Erreur cr√©ation recette:', response.status);
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erreur cr√©ation recette:', error);
    return null;
  }
}

// Test 3: R√©cup√©rer une recette
async function testGetRecipe(recipeId) {
  try {
    const response = await fetch(`http://192.168.1.146:8000/api/recipes/${recipeId}`);
    if (response.ok) {
      const recipe = await response.json();
      console.log('‚úÖ Recette r√©cup√©r√©e:', recipe.title);
      return recipe;
    } else {
      console.log('‚ùå Erreur r√©cup√©ration recette:', response.status);
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©cup√©ration recette:', error);
    return null;
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log('üöÄ D√©marrage des tests...');
  
  const apiOk = await testApiConnection();
  if (!apiOk) {
    console.log('‚ùå Tests arr√™t√©s - API non accessible');
    return;
  }
  
  const recipeId = await testCreateRecipe();
  if (recipeId) {
    await testGetRecipe(recipeId);
  }
  
  console.log('‚úÖ Tests termin√©s');
}

// Ex√©cuter les tests
runAllTests();
